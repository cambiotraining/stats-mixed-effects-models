{
  "hash": "966c0de37f3657573e82d6cd03d8829c",
  "result": {
    "markdown": "---\ntitle: \"Checking assumptions\"\noutput: html_document\n---\n\n\n\n::: {.cell}\n\n:::\n\n\nAs with all statistical models, mixed effects models make certain assumptions about the dataset and the population it's drawn from. If these assumptions are not well met, then any results we get from our model must be taken with a huge grain of salt.\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\nWe'll be using the `performance` package in R to visually check assumptions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load the package\ninstall.packages(\"performance\")\nlibrary(performance)\n```\n:::\n\n:::\n\n## What are the assumptions?\n\nThe assumptions of a linear mixed effects model - which we've been dealing with so far in the course - are very similar to the assumptions of a standard linear model, and include all the things you're likely used to seeing:\n\n- Continuous response variable\n- Independence of data points (beyond the non-independence that we have accounted for with our random effects)\n- Linearity in the relationship between the predictor(s) and the response\n- Residuals are normally distributed\n- Residuals have equality of variance\n\nAnd, though it isn't a \"formal\" assumption in the strictest sense, we also want to ensure that there aren't any overly influential data points.\n\nBecause we now have random effects in our model, there are a couple of additional assumptions that we make:\n\n- The coefficients of the random effects are normally distributed\n- Random effects are not influenced by any of the other predictors\n\n## Testing these assumptions\n\nThe first two of our assumptions - continuous response variable and independence - can't be tested just by examining the dataset or residuals. These two assumptions fit within a broader idea of \"choose the right model\", which requires you as a researcher to think carefully about your experimental design.\n\nThe rest of our assumptions can be assessed using the same method that we use for a standard linear regression analysis: visualisation via diagnostic plots.\n\nLet's look at our `sleepstudy` dataset again. Here is the full model that we fitted to those data:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"sleepstudy\")\n\nlme_sleep <- lmer(Reaction ~ Days + (1 + Days|Subject),\n                   data = sleepstudy)\n```\n:::\n\n:::\n\nNow, let's visualise it. We could create each of the plots by hand if we wished (using the `broom.mixed` package to augment our dataset), but thankfully there exists a much quicker method, using an R package called `performance`.\n\n::: {.callout-tip}\nThe `performance` package contains a bunch of functions that allow us to test the quality of our model. For the purposes of visualisation, we'll use `check_model`, but I encourage you to explore this package in more detail as there's a lot more to it (it's super helpful for evaluating the performance of generalised linear models and Bayesian models, as well as mixed models).\n\nNote that you might also need to install and/or load the `see` package in order to use the `performance` package.\n:::\n\n### The usual suspects\n\nWe'll start by looking at the diagnostic plots that we're used to seeing from standard linear models.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_sleep, \n            check = c(\"linearity\", \"homogeneity\", \"qq\", \"outliers\"))\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\nThe plot for influential observations might look a bit different to the Cook's distance plot that you might be used to. On this plot, there are 4 data points labelled in red which fall really far outside our dashed contour lines (8, 57, 60 and 131). This tells us that we might want to re-examine these points, perhaps by excluding them from the dataset, fitting a new linear mixed model, and seeing whether our conclusions are still the same.\n\nThe linearity and homogeneity of variance plots look alright, overall, although there's some indication that our influential points might be causing a bit of drama there too. There's some snaking in the Q-Q plot that suggests our residuals have a \"heavy-tailed\", or leptokurtic, distribution.\n\n### Normality of random effects\n\nThe other important assumption to check via visualisation is the normality of our random effects estimates.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_sleep, check = \"reqq\")\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\nWe have two random effects in our model - a set of random intercepts by `Subject`, and a set of random slopes of `Days` on `Subject`.\n\nFor each of these, a separate normal Q-Q plot has been constructed. If you look closely, you'll see that there are 18 points in each of our Q-Q plots here, which correspond to the 18 subjects in the dataset.\n\nThis lets us evaluate whether our set of coefficients for these random effects are normally distributed. In other words - do the set of y-intercepts and the set of gradients that were generated appear to have been sampled from a normal underlying distribution? Here, it looks like they do, which is excellent news.\n\n### Posterior predictive check\n\nOne of the other plots that is offered as part of `check_model` is called the posterior predictive check. It's quite a nice option to include, as it can give you an overall idea of how good a job your model does in predicting your data.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_sleep, check = \"pp_check\")\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\nHere, the function has run a set of simulations for us, using the linear mixed model we created. Each of these simulated datasets, created from our model, is shown on the plot by a thin blue line (as you can see, many simulations have been run).\n\nThe green line then shows us our current dataset. If the green line shows the same sort of pattern as all the thinner blue lines, this indicates good overall model fit.\n\nFor this dataset, it really isn't bad at all for the most part! However, our dataset (the green line) does have a bit of a \"dip\" or \"dent\" that doesn't seem to be occurring in very many of our blue lines. This could potentially indicate that our model is a bit too simple, i.e., there is some other important variable that we've not factored in here; or it could simply be a result of random noise.\n\n::: {.callout-tip collapse=\"true\"}\n### Changing plotting colours in check_model\n\nIf you find the green, blue and red default colours in `check_model` to be a little too similar to each other for your liking, there is an optional `colours` argument in the function that you can add. For instance, you could change the green to a yellow, by adding this to the `check_model` function: `colors = c(\"#fada5e\", \"#1b6ca8\", \"#cd201f\")`.\n:::\n\n## Exercises\n\n### Dragons revisited (again) {#sec-exr_dragons3}\n\n::: {.callout-exercise}\n\n\n{{< level 1 >}}\n\n\n\nLet's once again revisit the `dragons` dataset, and the minimal model that we chose in [Exercise -@sec-exr_dragons2] based on significance testing:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons <- read_csv(\"data/dragons.csv\")\n\nlme_dragons_dropx <- lmer(intelligence ~ wingspan + scales + \n                            (1 + wingspan|mountain), \n                            data=dragons)\n```\n:::\n\n:::\n\nFit diagnostic plots for this model using the code given above. What do they show?\n\n::: {.callout-tip collapse=\"true\"}\n#### Worked answer\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_dragons_dropx, \n            check = c(\"linearity\", \"homogeneity\", \"qq\", \"outliers\"))\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_model(lme_dragons_dropx, \n            check = c(\"reqq\", \"pp_check\"))\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n:::\n\n:::\n\nTry comparing these diagnostic plots to the diagnostic plots for the full model, `intelligence ~ wingspan*scales + (1 + wingspan|mountain)`. Are the assumptions better met? Why/why not?\n\n:::\n\n### Arabidopsis {#sec-exr_arabidopsis}\n\n::: {.callout-exercise}\n\n\n{{< level 2 >}}\n\n\n\nFor this second exercise, we'll use another internal dataset from `lme4`, called `Arabidopsis`. These data are about genetic variation in a plant genus *arabidopsis* (rockcress), in response to fertilisation and \"simulated herbivory\" (some of the plants' stems were damaged/clipped to simulate animal grazing).\n\n![They look like this - quite pretty!](images_mixed-effects/arabidopsis.webp){width=40% fig-alt=\"Close-up of an arabidopsis plant, with delicate white flowers\"}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Arabidopsis\")\n```\n:::\n\n:::\n\nIn this dataset, there are eight variables:\n\n- `total.fruits`, an integer variable measuring the total fruits produced per plant\n- `amd`, a variable measuring whether the plant underwent simulated herbivory (clipped or unclipped)\n- `nutrient`, a variable measuring which type of fertiliser/treatment the plant received (1, minimal or 8, added)\n- `reg`, or region, a variable with three categories (NL Netherlands, SP Spain, SW Sweden)\n- `popu`, or population, a variable representing groups within the regions\n- `gen`, or genotype, a variable with 24 categories\n- `rack`, a \"nuisance\" or confounding factor, representing which of two greenhouse racks the plant was grown on\n- `status`, another nuisance factor, representing the plant's germination method (Normal, Petri.Plate or Transplant)\n\nWe're interested in finding out whether the fruit yield can be predicted based on the type of fertiliser and whether the plant underwent simulated herbivory, across different genotypes and populations.\n\nFit the following mixed effects model: \n\n`total.fruits ~ nutrient + rack + status + amd + reg + (1|popu) + (1|gen)` \n\nand check its assumptions. What can you conclude about the suitability of a linear mixed effects model for this dataset?\n\n::: {.callout-tip collapse=\"true\"}\n#### Worked answer\n\n#### Fitting the model\n\nOur research question tell us that `total.fruits` is the response variable, and that `nutrient` and `amd` are fixed predictors of interest. The rest of our variables are confounds that we'd like to adjust for.\n\nOnly some of these additional variables have sufficient levels/categories to be treated as random effects, but both `popu` and `gen` do qualify. So far we've only talked about having one clustering variable at a time within a dataset; we'll talk more about this in subsequent sessions, and for now, we've shown you how to correctly do it for the current dataset:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_arabidopsis <- lmer(total.fruits ~ nutrient + rack + status + amd + reg + \n                          (1|popu) + (1|gen), data=Arabidopsis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nboundary (singular) fit: see help('isSingular')\n```\n:::\n:::\n\n:::\n\nThe nuisance variables `rack` and `status` are included, along with `reg` (which could potentially be an effect of interest depending on the research question). Because they have less than 5 levels, they're best fitted as fixed effects.\n\n#### Is this a suitable model?\n\nProbably not, for multiple reasons.\n\nFirstly, we get a warning message telling us that our model has a \"singular fit\". This is usually a sign that your dataset isn't large enough to support all of the different parameters, fixed or random, that you've asked R to estimate.\n\nSecondly, if we look at the diagnostic plots, we can see some real issues emerging.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_arabidopsis, \n            check = c(\"linearity\", \"homogeneity\", \"qq\", \"outliers\"))\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_model(lme_arabidopsis, \n            check = c(\"reqq\", \"pp_check\"))\n```\n\n::: {.cell-output-display}\n![](07-checking-assumptions_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n:::\n\nMany of these plots look bad. There's evidence for non-linearity, for heterogeneity of variance and non-normality in the residuals, and the posterior predictive check looks terrible.\n\n::: {.callout-caution icon=\"false\"}\n#### Bonus questions: can we fix any of this?\n\n\n{{< level 3 >}}\n\n\n\nWhen you have a singular fit, i.e., you're asking for too much from your dataset, a good first step is usually to try reducing the complexity of your model. Try performing some model comparison, or fitting simpler models, and see what happens.\n\nIf you check the assumptions for each of these simpler models, however, you'll probably notice that many of the issues persist.\n\nTo figure out why, and whether it's fixable, think about the types of variables we have, and how R is treating them. You might find the `as.factor` function useful in places; but does that fix everything?\n:::\n\nChat about these bonus questions with a neighbour, or a trainer. Understanding why these diagnostic plots look bad, and why we might need to take a closer look at the dataset before we fit things, will serve you really well when working with your own data.\n\n:::\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- Linear mixed effects models have the same assumptions as standard linear models\n- Mixed models also make assumptions about the distribution of random effects\n- The `performance` package in R can be used to assess whether these assumptions are met using diagnostic plots\n:::\n\n",
    "supporting": [
      "07-checking-assumptions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}