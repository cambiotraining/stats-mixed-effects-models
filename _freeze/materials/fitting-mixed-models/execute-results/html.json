{
  "hash": "5201d4f31b76c310df90dd4f3f4b24c7",
  "result": {
    "markdown": "---\ntitle: \"Fitting mixed models\"\noutput: html_document\n---\n\n::: {.cell}\n\n:::\n\n\nThe course materials so far have discussed the motivation behind mixed effects models, and why we might choose to include random effects.\n\nIn this section, we will learn how to fit these models in R, and how to visualise the results.\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\nWe'll be using the `lme4` package in R, which is by far the most common and best choice of package for this type of model. (It's an update of the older package `nlme`, which you might also see people using.) The syntax is nice and simple and extends what we've been doing so far with the `lm()` function in (hopefully!) a very intuitive way. \n\nThe package also contains functions for fitting non-linear mixed effects and generalised mixed effects models - though we won't be focusing on those here, it's nice to know that the package can handle them in case you ever choose to explore them in future!\n\nFor Python users, the `pymer4` package in Python allows you to \"borrow\" most of the functionality of R's `lme4`, though it still has many bugs that make it difficult to run on any system except Linux. There is also some functionality for fitting mixed models using `statsmodels` in Python. We won't be using those packages here, but you may wish to explore them if you are a die-hard Python user!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the required packages for fitting & visualising\nlibrary(tidyverse)\nlibrary(lme4)\nlibrary(broom)\nlibrary(broom.mixed)\nlibrary(patchwork)\n```\n:::\n\n:::\n\n## The sleepstudy data\n\nWe'll be using the internal `sleepstudy` dataset from the `lme4` package in R as an example (this dataset is also provided as a `.csv` file, if you'd prefer to read it in or are using Python).\n\nThis is a simple dataset taken from a real study that investigated the effects of sleep deprivation on reaction times in 18 subjects, and has just three variables: \n\n- `Reaction`, reaction time in milliseconds\n- `Days`, number of days of sleep deprivation\n- `Subject`, subject ID\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"sleepstudy\")\n```\n:::\n\n:::\n\nHave a look at the data more closely. You'll notice that for each subject, we've got 10 measurements, one for each day of sleep deprivation. This repeated measurement means that our data are not independent of one another; for each subject in the study we would expect measurements of reaction times to be more similar to one another than they are to reaction times of another subject.\n\nLet's start by doing something that we know is wrong, and ignoring this dependence for now. We'll begin by visualising the data with a simple scatterplot.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\nThis gives the overall impression that we might expect - reaction time does seem to slow as people become more sleep deprived.\n\nBut, as we've already pointed out, ignoring the fact that subjects' own reaction times will be more similar to themselves than to another subject's, we should make a point of accounting for this.\n\n## Adding random intercepts\n\nIn this dataset, we want to treat `Subject` as a random effect, which means fitting a mixed effects model. Why `Subject`? There are two things at play here that make us what to treat this as a random effect:\n\n1. `Subject` is a *grouping* variable within our dataset, and is causing us problems with independence.\n2. It's not these specific 18 subjects that we're interested in - they instead represent 18 random selections from a broader distribution/population of subjects that we could have tested. We would like to generalise our findings to this broader population.\n\nTo fit the model, we use a different function to what we've used so far, but the syntax looks very similar. The difference is the addition of a new term `(1|Subject)`, which represents our random effect.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\n# construct a linear mixed effects model with Subject\n# as a random effect\nlme_sleep1 <- lmer(Reaction ~ Days + (1|Subject), data = sleepstudy)\n\n# summarise the model\nsummary(lme_sleep1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: Reaction ~ Days + (1 | Subject)\n   Data: sleepstudy\n\nREML criterion at convergence: 1786.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.2257 -0.5529  0.0109  0.5188  4.2506 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n Subject  (Intercept) 1378.2   37.12   \n Residual              960.5   30.99   \nNumber of obs: 180, groups:  Subject, 18\n\nFixed effects:\n            Estimate Std. Error       df t value Pr(>|t|)    \n(Intercept) 251.4051     9.7467  22.8102   25.79   <2e-16 ***\nDays         10.4673     0.8042 161.0000   13.02   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n     (Intr)\nDays -0.371\n```\n:::\n:::\n\n:::\n\nOkay. The syntax might have looked similar to a standard linear model, but the output does not.\n\nIn later sections of the course, we'll discuss how to test significance based on this sort of output. In the meantime, however, to help get our head around the model we've fitted, we're going to visualise it.\n\nHere, we'll make use of the `broom` and `broom.mixed` packages to extract fitted values from the models - the `augment` function essentially creates a dataframe that contains both the raw data and the fitted values (along with residuals and other useful values), which helps a lot in plotting.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a linear model - we'll use this in our graph\nlm_sleep <- lm(Reaction ~ Days, data = sleepstudy)\n\n# set up our basic plot\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  \n  # create separate plots for each subject in the sample\n  # and add the data points\n  facet_wrap(facets = vars(Subject), nrow = 3) +\n  geom_point() +\n  \n  # this adds the line of best fit for the whole sample\n  # (without the random effect), using coefficients\n  # from our simple linear model object\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) + \n  \n  # and finally, this will add different lines of best fit\n  # for each subject as calculated in our mixed model object\n  geom_line(data = augment(lme_sleep1), aes(y = .fitted), colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\nEach plot represents a different subject's data. On each plot, we've added the following:\n\n* in black we have the same overall line of best fit from our original (incorrect) linear model.\n* in blue are the individual lines of best fit for each subject. These lines move up and down the plot relative to the global line of best fit. This reflects the fact that, though all subjects are declining as they become more sleep deprived, some of them started with slower baseline reaction times, with different y-intercepts to match. Subject 310, for instance, seems to have pretty good reflexes relative to everyone else, while subject 337 isn't quite as quick on the trigger.\n\nWe can visualise the same model slightly differently, to allow us to look at the set of lines of best fit together. Here, we will create a plot that doesn't have facets (but still shows us the same model predictions):\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point() +\n  \n  # include the global line of best fit\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) +\n  \n  # include individual lines of best fit\n  geom_line(data = augment(lme_sleep1), aes(y = .fitted, group = Subject), \n            colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n:::\n\nThe global line of best fit is in the middle (in black), with each of the individual subject lines of best fit around it.\n\nFrom this plot, we can see that the *gradient* of each of these blue lines is still the same as the overall line of best fit. This is because we've added a random intercept in our model, but have **kept the same slope**. \n\nThis reflects an underlying assumption that the relationship between sleep deprivation and reaction time is the same - i.e. that people get worse at the same rate - even if their starting baselines differ.\n\nWe might not think that this assumption is a good one, however. And that's where random slopes come in.\n\n## Adding random slopes\n\nTo add a random slope as well as a random intercept, we need to alter the syntax slightly for our random effect. Now, instead of `(1|Subject)`, we'll instead use `(1 + Days|Subject)`. This allows the relationship between `Days` and `Reaction` to vary between subjects.\n\nLet's fit that new model and summarise it.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_sleep2 <- lmer(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy)\n\nsummary(lme_sleep2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: Reaction ~ Days + (1 + Days | Subject)\n   Data: sleepstudy\n\nREML criterion at convergence: 1743.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.9536 -0.4634  0.0231  0.4634  5.1793 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr\n Subject  (Intercept) 612.10   24.741       \n          Days         35.07    5.922   0.07\n Residual             654.94   25.592       \nNumber of obs: 180, groups:  Subject, 18\n\nFixed effects:\n            Estimate Std. Error      df t value Pr(>|t|)    \n(Intercept)  251.405      6.825  17.000  36.838  < 2e-16 ***\nDays          10.467      1.546  17.000   6.771 3.26e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n     (Intr)\nDays -0.138\n```\n:::\n:::\n\n:::\n\nWe can go ahead and add our new lines (in red) to our earlier facet plot. Only the last line of code is new here:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  facet_wrap(facets = vars(Subject), nrow = 3) +\n  geom_point() +\n  \n  # the global line of best fit\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) + \n  \n  # our previous lines of best fit, with random intercepts\n  # but constant slope\n  geom_line(data = augment(lme_sleep1), aes(y = .fitted), colour = \"blue\") +\n  \n  # our lines of best with random intercepts and random slopes\n  geom_line(data = augment(lme_sleep2), aes(y = .fitted), colour = \"red\") \n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n:::\n\nWhile for some of our subjects, the red, blue and black lines look quite similar, for others they diverge a fair amount. Subjects 309 and 335, for instance, are displaying a remarkably flat trend that suggests they're not really suffering delays in reaction time from their sleep deprivation very much at all, while subject 308 definitely seems to struggle without their eight hours.\n\nLet's compare those different red lines, representing our random intercepts & slopes model, on a single plot. This is the same code as we used a couple of plots ago, except the last line is now different:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point() +\n  \n  # include the global line of best fit\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) +\n\n  # include individual lines of best fit\n  geom_line(data = augment(lme_sleep2), aes(y = .fitted, group = Subject), \n            colour = \"red\")\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\nVisualising all of our lines of best fit simultaneously like this makes it clearer what it means to have both random intercepts and random slopes. Each line of best fit starts in a slightly different place, and also has a different gradient.\n\n### Fitting random slopes without random intercepts\n\nIt's quite unusual to fit a model with random slopes but without random intercepts - but it's absolutely possible.\n\nThe `lme4` package includes \"implicit random intercepts\", meaning that we don't actually need to specify the 1 in our random effects structure for random intercepts to be fitted. \n\nTry running the following, and compare the two outputs - these models are identical:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_explicit <- lmer(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy)\nlme_implicit <- lmer(Reaction ~ Days + (Days|Subject), data = sleepstudy)\n\nsummary(lme_explicit)\nsummary(lme_implicit)\n```\n:::\n\n:::\n\nIf we were determined to remove the random intercepts, we have to explicitly tell `lme4` not to fit them, like this:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_slopesonly <- lmer(Reaction ~ Days + (0 + Days|Subject), data = sleepstudy)\n\nsummary(lme_slopesonly)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: Reaction ~ Days + (0 + Days | Subject)\n   Data: sleepstudy\n\nREML criterion at convergence: 1766.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.5104 -0.5588  0.0541  0.6244  4.6022 \n\nRandom effects:\n Groups   Name Variance Std.Dev.\n Subject  Days  52.71    7.26   \n Residual      842.03   29.02   \nNumber of obs: 180, groups:  Subject, 18\n\nFixed effects:\n            Estimate Std. Error     df t value Pr(>|t|)    \n(Intercept)   251.41       4.02 161.00  62.539  < 2e-16 ***\nDays           10.47       1.87  21.68   5.599 1.32e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n     (Intr)\nDays -0.340\n```\n:::\n:::\n\n:::\n\nYou should see that the random intercepts have now disappeared from the output.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point() +\n  \n  # include the global line of best fit\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) +\n  \n  # include individual lines of best fit\n  geom_line(data = augment(lme_slopesonly), aes(y = .fitted, group = Subject), \n            colour = \"purple\")\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n:::\n\nIndeed, looking at each of the lines of best fit here, we can see that they all have the same intercept (i.e., the same value of y when x = 0), but with differing slopes.\n\n## Two-level models\n\nAll of the mixed models we've fitted to these data so far (with random slopes and/or random intercepts) can be described as two-level models.\n\nA standard linear model would be a one-level model, where we have true independence and no clustering/grouping variables.\n\nBut for this dataset, the `Subject` variable creates clusters, so we have a different set of `Reaction` times for each `Subject`. Whether we choose to fit random intercepts, slopes, or both, this overall structure between the variables remains the same, creating a hierarchy with two levels. Hence, a two-level model!\n\nLater in the course, we will look at more complicated models, where we have multiple clustering variables that we want to generate random effects for, due to more complex experimental designs.\n\n### Equations & notation\n\nFor those who are interested in notation and equations, the drop-down box below gives a little more detail on how this works for a linear mixed effects model. \n\nThis subsection skews a bit more in the maths direction, and won't be needed by everyone who uses mixed models in their research. But, it's included here as bonus material for anyone who finds equations helpful, or for those who might need this for reporting on and reading about mixed models!\n\n::: {.callout-note collapse=\"true\"}\n#### Linear mixed models notation\n\nFor the `sleepstudy` dataset, a standard linear model `Reaction ~ Days` would be written in the format:\n\n$$\ny = \\beta_{0} + \\beta_{1}x_{1} + \\epsilon\n$$\n\nThe $x$ variable here is, of course, `Days`, and $y$ is our response variable `Reaction`.\n\nIn this equation, $\\beta_{0}$ represents the intercept, and $\\beta_{1}$ represents the slope or gradient. Each of these is either a single fixed number, or, in the case of a categorical predictor, a set of fixed means for the groups. \n\nThe $\\epsilon$ at the end represents our error, or noise. In the case of linear model, we measure this by calculating the residuals. As you already know from standard linear models, we assume that these residuals are random and normally distributed. So, we could additionally note that:\n\n$$\n\\epsilon ∼ N(0, \\sigma^2)\n$$\n\nThis is just fancy shorthand for: \"the errors are drawn from a normal distribution, which has a mean of 0 and variance $\\sigma^2$\". This variance is something we need to estimate, in order to perform our regression analysis.\n\n#### Random intercepts model\n\nWhen we add random effects to deal with the clustering variable `Subject`, however, we are doing more than just estimating a fixed mean or coefficient.\n\nThat's because we're actually estimating a *distribution* of coefficients whenever we estimate a random effect. \n\nSo, when we include random intercepts in our model `Reaction ~ Days + (1|Subject)`, we are not just estimating three numbers. We estimate an intercept for each `Subject` in the dataset. And, we are assuming that those intercepts have been drawn from a normal distribution with mean 0 - this is a baked-in assumption of a linear mixed model (more on assumptions in a later section).\n\nFor this model, the equation for our model is now written like this:\n\n$$\ny_{ij} = \\beta_{0j} + \\beta_{1}x_{ij} + \\epsilon_{ij}\n$$\n\nWhere have these extra subscript letters come from?\n\nWell, previously we didn't bother with this, because a standard linear model only has one level. Now, we have a two-level model, so we use $i$ and $j$ to refer to those different levels.\n\nHere, $j$ would represent the different levels of our clustering variable `Subject`. The letter $i$ then represents the set of values within each cluster $j$. So, $ij$ in our subscripts refers to our entire set of response/outcome values `Reaction`, which here are measured at the level of individual `Days` within each `Subject`.\n\nThe term $\\beta_{0j}$ tells us that we have random intercepts. For each of our $j$ clusters, there is a separate $\\beta_{0}$. You will sometimes see a random effect broken down further, like this:\n\n$$\n\\beta_{0j} = \\gamma_{00} + U_{0j}\n$$\n\nHere, the $\\gamma_{00}$ refers to the \"grand intercept\", i.e., the average intercept across all groups. This is a fixed effect, one single value that doesn't change, and we need to estimate it in order to be able to then estimate $U_{0j}$. It's conventional - though not compulsory - to use $\\gamma$ to represent fixed/global coefficients like this.\n\nThe $U_{0j}$ bit then refers to the set of deviations from that grand intercept, one for each of your clusters/groups. These deviations should be normally distributed with mean 0 and variance $\\tau^2_{00}$. Again, it's conventional to use $\\tau^2$ to refer to the variance of random effects specifically (rather than $\\sigma^2$, which we used for the variance of our residuals). You will sometimes see people use letters other than $U$ to refer to the set of deviations/coefficients, especially when there are more than two levels in the model (more on that in a later section.)\n\n$$\nU_{0j} ∼ N(0, \\tau^2_{00})\n$$\n\nOnce again, we also assume that our errors $\\epsilon_{ij}$ are normally distributed around 0 as well, just as we did with the standard linear model.\n\n#### Random intercepts & random slopes model\n\nNow let's look at what happens when we add a second random effect, as in the model `Reaction ~ Days + (1 + Days|Subject)`. The equation now looks like this.\n\nLevel 1:\n\n$$\ny_{ij} = \\beta_{0j} + \\beta_{1j}x_{ij} + \\epsilon_{ij}\n$$\n\nLevel 2:\n\n$$\n\\beta_{0j} = \\gamma_{00} + U_{0j}\n$$\n$$\n\\beta_{1j} = \\gamma_{10} + U_{1j}\n$$\n\nwhere,\n\n$$\n\\left( \\begin{array}{c} U_{0j} \\\\ U_{1j} \\end{array} \\right) ∼ N \\left( \\begin{array}{c} 0 \\\\ 0 \\end{array}   , \\begin{array}{cc} \\tau^2_{00} & \\rho_{01} \\\\ \\rho_{01} &  \\tau^2_{10} \\end{array} \\right)\n$$\n\nWe now have two random effects instead of one. We can tell this because we're now writing $\\beta_{1j}$ and specifying an additional equation for it, instead of just writing $\\beta_{1}$ for a single fixed value of the slope.\n\nAdmittedly, that last bit looks more complicated than before. We won't go into too much detail, but what's happening on the right is known as a \"variance-covariance\" matrix. When you include multiple random effects in a mixed model, the correlations between those random effects are also estimated. So we actually make assumptions about the joint distribution that all of the random effects are being drawn from. If this statement alone doesn't satisfy your curiosity, you might find [this link](https://rpubs.com/yjunechoe/correlationsLMEM) a useful resource with some handy visualisations of how this works!\n\nIf that's a bit more complicated than you're interested in, don't worry. You don't need to understand all that maths to be able to used a mixed effects model. It boils down to the same thing: that random effects are a set of coefficients with some variance, and we make assumptions about their distribution(s).\n\n#### A helpful summary\n\nThis table summarises and defines each of the terms included in the equation(s) above.\n\n| Parameter | Description |\n|:-|:-----|\n|$y_{ij}$|Response/outcome; value of `Reaction` for subject $j$ on day $i$|\n|$x_{ij}$|Predictor; value of `Days` for subject $j$ on day $i$|\n|$\\beta_{0j}$|Level 1 intercept parameter, containing a fixed and a random effect|\n|$\\gamma_{00}$|Fixed effect; grand (average) intercept|\n|$U_{0j}$|Random effect; deviation from grand intercept for subject $j$|\n|$\\beta_{1j}$|Level 1 slope parameter, containing a fixed and a random effect|\n|$\\gamma_{10}$|Fixed effect; grand (average) slope|\n|$U_{1j}$|Random effect; deviation from grand slope for subject $j$|\n|$\\epsilon_{ij}$|Error/residual (difference between real value and predicted value) of `Reaction` for subject $j$ on day $i$|\n|$\\tau^2_{00}$|Variance of random intercepts $U_{0j}$|\n|$\\tau^2_{10}$|Variance of random slopes $U_{1j}$|\n|$\\rho_{01}$|Covariance between random effects $U_{0j}$ and $U_{1j}$|\n\n:::\n\n### Sharing information\n\nFinally, while we're working with the `sleepstudy` dataset, let's take the opportunity to visualise something else that's special about random effects (which we'll discuss more later in the course): sharing information between levels.\n\nAs an extra observation, let's use `geom_smooth` to add the lines of best fit that we would see if we fitted each subject with their own individual regression:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  facet_wrap(facets = vars(Subject), nrow = 3) +\n  geom_point() +\n  \n  # the global line of best fit\n  geom_line(data = augment(lm_sleep), aes(y = .fitted)) + \n  \n  # random intercepts only\n  geom_line(data = augment(lme_sleep1), aes(y = .fitted), colour = \"blue\") +\n  \n  # random intercepts and random slopes\n  geom_line(data = augment(lme_sleep2), aes(y = .fitted), colour = \"red\") +\n  \n  # individual regression lines for each individual\n  geom_smooth(method = \"lm\", se = FALSE, colour = \"green\", linewidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n\nHere, the black line (which is the same on every plot) represents a global line of best fit - this is what we would see if we ignored the `Subject` variable entirely and just did a simple linear regression. This is called **complete pooling**.\n\nThe green lines, meanwhile, represent what happens when we split our dataset into separate groups by `Subject`, and fit individual regressions between `Reaction` and `Days` that are completely independent of each other. This is called **no pooling**, i.e., treating `Subject` as a fixed effect.\n\nThe blue and red lines represent our mixed effects models - the difference between the two is whether we allowed the slope to vary randomly, as well as the random intercept. In both cases, we are using something called **partial pooling**. \n\nComparing the green and red lines in particular allows us to see the phenomenon of \"shrinkage\", which occurs because of partial pooling. \n\nThe red lines are all closer to the black line than the green line is. In other words, the predictions for our mixed effects model are more similar to the global line of best fit, than the individual regression lines are to that global line. We say that the red lines (our mixed model) are showing some shrinkage towards the global line; Subjects 330, 335 and 370 perhaps show this best. \n\nThis happens because, when random effects are estimated, information is shared between the different levels of the random effect (in this case, between subjects). Though we still estimate separate slopes and/or intercepts for each subject, we take into account the global average, and this pulls the individual lines of best fit towards the global one.\n\nThis idea of taking into account the global average when calculating our set of random slopes or intercepts is another key element that helps us decide whether we want to treat a variable as a random effect. Do you want to share information between your categories, or is it better for your research question to keep them separate?\n\n## Exercises\n\n### Exercise 1 - Irrigation\n\n\n{{< level 1 >}}\n\n\n\nThis example uses the `irrigation` dataset. The study is a split-plot design, used for an agricultural trial aimed at maximising crop yield.\n\nTwo crop varieties and four different irrigation methods were tested across eight fields available for the experiment. Only one type of irrigation method can be applied to each field, but the fields are divided into two halves with a different variety of crop planted in each half.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nirrigation <- read_csv(\"data/irrigation.csv\")\n```\n:::\n\n:::\n\nThere are four variables in total:\n\n- `field` ID, f1 through f8\n- `irrigation` method used, i1 through i4\n- `variety` of crop, v1 or v2\n- `yield`, the total crop yield per field\n\nFor this exercise: \n\n1. Visualise the data\n2. Fit a mixed model\n\nDoes it look as if `irrigation` method or crop `variety` are likely to affect `yield`?\n\n::: {.callout-note collapse=\"true\"}\n#### Worked answer\n\n#### Visualise the data\n\nThis is quite a small dataset, with only 16 data points. We want to know whether `irrigation`, on the x axis, and/or `variety`, split by colour, affect `yield`; so let's put all of those variables on the same plot:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(irrigation, aes(x = irrigation, y = yield, colour = variety)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\nIt looks as if there could be some differences between `irrigation` levels, but the effect of `variety` looks less clear.\n\nOur data points do all appear to be paired together, and this is almost certainly related to our `field` variable, which we can see if we alter the plot above:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(irrigation, aes(x = irrigation, y = yield, colour = field)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n:::\n\nThe effect of `field`, then, seems quite strong.\n\n#### Fit the model\n\nWe can see from the plots above that we need to consider `field` as an important grouping variable. We'd like to account for variance between fields in our model, but we're not interested in this specific set of fields: so, we'll treat it as a random effect.\n\nWe'll also include fixed effects of `irrigation` and `variety`, as well as their interaction, since these are our predictors of interest.\n\nWe don't have enough observations in this dataset to add random slopes, so we only have random intercepts by field. (If you're curious, have a look at the error message that occurs if you try to fit random slopes for `variety` by `field`; feel free to ask a trainer about it.)\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_yield <- lmer(yield ~ irrigation*variety + (1|field), data = irrigation)\n\nsummary(lme_yield)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: yield ~ irrigation * variety + (1 | field)\n   Data: irrigation\n\nREML criterion at convergence: 45.4\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-0.7448 -0.5509  0.0000  0.5509  0.7448 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n field    (Intercept) 16.200   4.025   \n Residual              2.107   1.452   \nNumber of obs: 16, groups:  field, 8\n\nFixed effects:\n                       Estimate Std. Error     df t value Pr(>|t|)    \n(Intercept)              38.500      3.026  4.487  12.725 0.000109 ***\nirrigationi2              1.200      4.279  4.487   0.280 0.791591    \nirrigationi3              0.700      4.279  4.487   0.164 0.877156    \nirrigationi4              3.500      4.279  4.487   0.818 0.454584    \nvarietyv2                 0.600      1.452  4.000   0.413 0.700582    \nirrigationi2:varietyv2   -0.400      2.053  4.000  -0.195 0.855020    \nirrigationi3:varietyv2   -0.200      2.053  4.000  -0.097 0.927082    \nirrigationi4:varietyv2    1.200      2.053  4.000   0.584 0.590265    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) irrgt2 irrgt3 irrgt4 vrtyv2 irr2:2 irr3:2\nirrigation2 -0.707                                          \nirrigation3 -0.707  0.500                                   \nirrigation4 -0.707  0.500  0.500                            \nvarietyv2   -0.240  0.170  0.170  0.170                     \nirrgtn2:vr2  0.170 -0.240 -0.120 -0.120 -0.707              \nirrgtn3:vr2  0.170 -0.120 -0.240 -0.120 -0.707  0.500       \nirrgtn4:vr2  0.170 -0.120 -0.120 -0.240 -0.707  0.500  0.500\n```\n:::\n:::\n\n:::\n\nThis output shows us that our global average yield is 38.5 (the Intercept line for the fixed effects results). Relative to this, the variance of our `field` random effect is reasonably big at 16.2. Meanwhile, the differences for each of the different varieties and irrigation methods are all quite small.\n\n#### Visualise the model\n\nSince we're not comparing multiple different models in the same plot, we can be more efficient by putting the augmented model object directly into the first line of our `ggplot` function. Because both of our fixed predictors are categorical variables, we can more easily visualise the model with boxplots than with lines of best fit. \n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(augment(lme_yield), aes(x = irrigation, y = yield, colour = variety)) +\n  geom_point() +\n  geom_boxplot(aes(y = .fitted, group = paste(variety, irrigation)))\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n:::\n\nYou might be looking at the above graph, and wonder what impact the random effect of `field` has had on these model predictions. Well, if we tweak the graph a little bit and add the individual predicted values by `variety`, `irrigation` and `field` all at once, we can get a sense of how the predicted values have actually moved closer, or \"shrunk\", towards one another.\n\nAnother way to think about this is: some of the variance in the `yield` response variable, which in a simple linear model would be attributed entirely to our fixed predictors, is being captured instead by the differences between our random fields. So, the final effects of `irrigation * variety` are lessened.\n\nIn the next session of the course, we'll talk about how to check whether these results are significant.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(augment(lme_yield), aes(x = irrigation, y = yield, shape = variety)) +\n  geom_point() +\n  geom_point(aes(y = .fitted, group = paste(field, variety, irrigation), colour = field))\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n:::\n\n:::\n\n### Exercise 2 - Solutions\n\n\n{{< level 2 >}}\n\n\n\nA lab technician wants to test the purity of their stock of several common solutes. They take multiple samples of each solute, and dissolve them into six common solvents four times each (for a total of 72 solutions).\n\nThe technician wants to know the average dissolving time of each solute across replicates and across solvents, which they can compare against known figures to check the quality of each solute.\n\nRead in the `solutions.csv` dataset. Explore the data and experimental design (including by visualising), and then fit at least one appropriate mixed effects model.\n\n::: {.callout-note collapse=\"true\"}\n#### Hints\n\nThere is no worked answer provided for this exercise, in order to challenge you a little. If, however, you are looking for guidance on what steps to take and which functions to use, you can use the `irrigation` example above as a scaffold.\n\nNote: if you encounter the `boundary (singular) fit: see help('isSingular')` error, this doesn't mean that you've used the `lme4` syntax incorrectly; as we'll discuss later in the course, it means that the model you've fitted is too complex to be supported by the size of the dataset.\n:::\n\n### Exercise 3 - Dragons\n\n\n{{< level 2 >}}\n\n\n\n*The inspiration for this example dataset is taken from an [online tutorial](https://ourcodingclub.github.io/tutorials/mixed-models/) by Gabriela K Hadjuk.*\n\nRead in the `dragons.csv` file, explore these data, then fit, summarise and visualise at least one mixed effects model.\n\nThis is a slightly more complicated dataset, with five different variables:\n\n- `dragon`, which is simply an ID number for each dragon measured; here, each dragon is unique\n- `wingspan`, a measure of the size of the dragon\n- `scales`, a categorical (binary) variable for what colour scales the dragon has\n- `mountain`, a categorical variable representing which mountain range the dragon was found on\n- `intelligence`, our continuous response variable\n\nWe're interested in the relationships between `wingspan`, the colour of `scales` and `intelligence`, but we want to factor in the fact that we have measured these variables across 5 different mountain ranges.\n\nWith more variables, there are more possible models that could be fitted. Think about: what different structures might the fixed and random effects take? How does that change our visualisation?\n\nTry to work through this yourself, before expanding the answer below.\n\n::: {.callout-note collapse=\"true\"}\n#### Worked answer\n\nHere, we'll work through how to fit and visualise one possible mixed effects model that could be fitted to these data.\n\nBut, if you fitted models with other sets of fixed/random effects and explored those, well done. We'll talk in the next section of the course about how you can decide between these models to determine which is the best at explaining the data. Right now, it's just the process that matters.\n\n#### Visualise the data\n\nBefore we do anything else, let's have a look at what we're working with:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons <- read_csv(\"data/dragons.csv\")\n```\n:::\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dragons, aes(x = wingspan, y = intelligence, colour = scales)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(dragons, aes(x = scales, y = intelligence)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n:::\n\n:::\n\nAs a whole, we get the impression that as wingspan increases, so does intelligence. It also looks as if intelligence is slightly higher on average in metallic dragons than in chromatic dragons.\n\nMight there be an interaction between `wingspan` and `scales`? It's hard to tell from our first plot, but it's not impossible. (You could try using the `geom_smooth` function to fit a basic grouped linear regression, if you wanted a clearer idea at this stage.)\n\nNow, let's produce the same plots, but faceted/split by mountain range:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dragons, aes(x = wingspan, y = intelligence, colour = scales)) +\n  facet_wrap(vars(mountain)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(dragons, aes(x = scales, y = intelligence)) +\n  facet_wrap(vars(mountain)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-23-2.png){width=672}\n:::\n:::\n\n:::\n\nThe broad impression remains the same, but for one thing: the strength of the relationship between `wingspan` and `intelligence` seems to vary across our different facets, i.e. between mountain ranges. \n\nIt's hard to tell whether the relationship between `scales` and `intelligence` also differs across mountain ranges, as this effect is subtler overall.\n\n#### Consider the fixed effects \n\nWe have four options for our fixed effects structure:\n\n- No fixed effects (a random effects only model)\n- A single effect, of either `wingspan` or `scales`\n- An additive model\n- Including both main effects and an interaction\n\nWe'll talk in the next section of the course about how we can compare between different models and determine whether individual predictors are significant or not.\n\nHowever, in this case we want to fit at least an additive fixed effects structure, as the exercise summary indicated that we are interested in whether `scales` and `wingspan` have a bearing on `intelligence`. For this walkthrough, we'll include the interaction term as well.\n\n#### Consider the random effects\n\nThere is only one variable in this dataset that it would be suitable to consider \"random\": `mountain`. And, given how the plots look when we split them by mountain range, it would seem that this is very much something we want to take into account.\n\n(The `wingspan` variable is continuous, and the categorical `scales` variable only contains two levels, making both of these inappropriate/impossible to treat as random variables.)\n\nHowever, as we learned by looking at the `sleepstudy` dataset, we can fit multiple separate random effects, meaning that even with just `mountain` as a clustering variable, we have options!\n\n- Random intercepts, by mountain; `(1|mountain)`\n- Random slopes for `wingspan`, by mountain; `(0 + wingspan|mountain)`\n- Random slopes for `scales`, by mountain; `(0 + scales|mountain)`\n- Random slopes for `wingspan:scales`, by mountain; `(0 + wingspan:scales|mountain)`\n\n::: {.callout-tip}\nThis last option is worth taking a moment to unpack. \n\nAllowing `wingspan:scales` to vary by mountain means that we are asking the model to assume that the strength of the interaction between `wingspan` and `scales` varies between mountain ranges such that the different coefficients for that interaction are drawn from a random distribution.\n\nOr, phrased differently: the strength of the relationship between `wingspan` and `intelligence` depends on `scales` colour, but the degree to which it is dependent on `scales` colour also varies between `mountain` ranges.\n\nThis is biologically plausible! Though, we're dealing with imaginary creatures, so one could facetiously claim that *anything* is biologically plausible...\n:::\n\nAgain, the next section of the course will talk about how we can compare models to decide which predictors (including random effects) are making useful contributions to our model.\n\nIt would be perfectly allowable for you to fit all four of these random effects if you wanted to. The syntax to include them all would be `(1 + wingspan*scales|mountain)`, or written out in full, `(1 + wingspan + scales + wingspan:colour|mountain)`.\n\nFor now, though, we'll just fit the first two random effects (random intercepts, and random slopes for `wingspan`, by `mountain`), to keep things a little simpler.\n\n#### Fit the model\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_dragons <- lmer(intelligence ~ wingspan*scales + (1 + wingspan|mountain), \n                    data=dragons)\nsummary(lme_dragons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: intelligence ~ wingspan * scales + (1 + wingspan | mountain)\n   Data: dragons\n\nREML criterion at convergence: 1629.3\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.56346 -0.66381  0.04359  0.69979  2.56843 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr\n mountain (Intercept)  10.4730  3.2362      \n          wingspan      0.2629  0.5127  0.09\n Residual             181.4417 13.4700      \nNumber of obs: 200, groups:  mountain, 5\n\nFixed effects:\n                         Estimate Std. Error        df t value Pr(>|t|)    \n(Intercept)              89.28519    3.73223  10.69540  23.923 1.24e-10 ***\nwingspan                  1.00255    0.23620   4.22265   4.244  0.01177 *  \nscalesmetallic           15.67710    4.81498 188.76548   3.256  0.00134 ** \nwingspan:scalesmetallic  -0.09228    0.07976 188.37980  -1.157  0.24878    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) wngspn sclsmt\nwingspan    -0.168              \nscalesmtllc -0.649  0.155       \nwngspn:scls  0.590 -0.167 -0.918\n```\n:::\n:::\n\n:::\n\nThis output looks very similar to what we saw before. The main difference here is that our fixed effect structure is more complex than for the `sleepstudy` dataset - hence, we have two additional rows, for our second main effect and our interaction. (The correlation matrix for our fixed effects, right at the bottom, has also become more complicated.)\n\n#### Visualise the model\n\nWe'll start by building a plot that's faceted by `mountain`, since we know this is a crucial clustering variable. To add our mixed model to the plot, we use the `augment` function from the `broom.mixed` package.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dragons, aes(x = wingspan, y = intelligence, colour = scales)) +\n  facet_wrap(vars(mountain)) +\n  geom_point() +\n  \n  # use augment so that we can plot our mixed model\n  geom_line(data = augment(lme_dragons), aes(y = .fitted))\n```\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n:::\n\nAlternatively (or additionally) we can view all of these lines on a single plot, with a black line representing the global average:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dragons, aes(x = wingspan, y = intelligence, colour = mountain)) +\n  geom_point() +\n  \n  # plot the mixed model\n  geom_line(data = augment(lme_dragons), aes(y = .fitted, \n                    linetype = scales, group = paste(mountain, scales))) +\n  \n  # add the global average line\n  geom_smooth(method = \"lm\", se = FALSE, colour = \"black\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](fitting-mixed-models_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n:::\n\n#### Alternative models\n\nWhat happens if we do fit the more complex random effects structures that were mentioned above?\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_dragons_complex <- lmer(intelligence ~ wingspan*scales + \n                              (1 + wingspan*scales|mountain), data=dragons)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nboundary (singular) fit: see help('isSingular')\n```\n:::\n\n```{.r .cell-code}\nsummary(lme_dragons_complex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: intelligence ~ wingspan * scales + (1 + wingspan * scales | mountain)\n   Data: dragons\n\nREML criterion at convergence: 1624.5\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.45624 -0.60041 -0.02585  0.68853  2.57259 \n\nRandom effects:\n Groups   Name                    Variance  Std.Dev. Corr             \n mountain (Intercept)             122.56574 11.0709                   \n          wingspan                  0.29770  0.5456  -0.23            \n          scalesmetallic          156.14278 12.4957  -1.00  0.25      \n          wingspan:scalesmetallic   0.04728  0.2174   0.99 -0.36 -0.99\n Residual                         173.46583 13.1706                   \nNumber of obs: 200, groups:  mountain, 5\n\nFixed effects:\n                        Estimate Std. Error       df t value Pr(>|t|)    \n(Intercept)             89.14563    5.99808  4.06220  14.862 0.000108 ***\nwingspan                 1.00264    0.25025  4.00432   4.006 0.016009 *  \nscalesmetallic          16.02787    7.31986  4.48351   2.190 0.086395 .  \nwingspan:scalesmetallic -0.09562    0.12475  4.46561  -0.766 0.481936    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) wngspn sclsmt\nwingspan    -0.303              \nscalesmtllc -0.887  0.281       \nwngspn:scls  0.861 -0.372 -0.962\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n:::\n:::\n\n:::\n\nThis is the most complex model we could fit, with all the possible fixed and random effects included. You'll notice that you encounter an error, telling you that you have singular fit.\n\nOur dataset is likely too small to support so many random effects; 200 might sound large, but in the context of a mixed effects model, it unfortunately is not.\n\nYou might also notice in the model summary that the estimated variance for the random slopes of `wingspan:scales` is also very small. This is a decent indication that this random effect probably isn't useful in this model, probably because this effect isn't actually occurring in our underlying dragon population.\n\n:::\n\n::: {.callout-tip appearance=\"minimal\"}\n#### Bonus questions\n\n\n{{< level 3 >}}\n\n\n\nFor those who want to push their understanding a bit further, here's a few additional things to think about. We won't give the answers here, but if you're interested, call a trainer over to chat about them more.\n\n- How could you adapt the code above to visualise a mixed effects model that did not include `scales` as a fixed predictor?\n- How much shrinkage do you observe for the lines of best fit in the `dragons` dataset? Is this more or less than in the `sleepstudy` dataset? Why might this be?\n- What syntax would you use in `lme4` to fit a model with the following equation to the dragons dataset?\n\n::: {.callout-note collapse=\"true\"}\n#### Model equation\n\nLevel 1:\n\n$$\ny_{ij} = \\beta_{0j} + \\beta_{1j}x_{1ij} + \\beta_{2j}x_{2ij} + \\beta_3x_{1ij}x_{2ij} + \\epsilon_{ij}\n$$\n\nLevel 2:\n\n$$\n\\beta_{0j} = \\gamma_{00} + U_{0j}\n$$\n$$\n\\beta_{1j} = \\gamma_{10} + U_{1j}\n$$\n$$\n\\beta_{2j} = \\gamma_{20} + U_{2j}\n$$\n\nand,\n\n$$\n\\left( \\begin{array}{c} U_{0j} \\\\ U_{1j} \\\\ U_{2j} \\end{array} \\right) ∼ N \\left( \\begin{array}{c} 0 \\\\ 0 \\\\ 0 \\end{array}   , \\begin{array}{cc} \\tau^2_{00} & \\rho_{01} & \\rho_{02} \\\\ \\rho_{01} &  \\tau^2_{10} & \\rho_{12} \\\\ \\rho_{02} & \\rho_{12} & \\tau^2_{20} \\end{array} \\right)\n$$\n\nWhere $y$ is `intelligence`, $x_1$ is `wingspan`, $x_2$ is `scales`, $j$ represents mountain ranges and $i$ represents individual dragons within those mountain ranges.\n\n:::\n\n:::\n\n## Summary\n\nThis section of the course is designed to introduce the syntax required for fitting two-level mixed models in R, including both random intercepts and random slopes, and how we can visualise the resulting models.\n\nLater sections will address significance testing and assumption checking, as well as how to fit more complex mixed models.\n\n::: {.callout-tip}\n#### Key points\n- Mixed effects models can be fitted using the `lme4` package in R, which extends the linear model by introducing specialised syntax for random effects\n- For random intercepts, we use the format `(1|B)`, where B is our grouping variable\n- For random intercepts with random slopes, we use the format `(1 + A|B)`, where we allow the slope of A as well as the intercept to vary between levels of B\n- For random slopes only, we use `(0 + A|B)`, which gives random slopes for A without random intercepts\n- Random effects are fitted using partial pooling, which results in the phenomenon of \"shrinkage\"\n:::\n\n",
    "supporting": [
      "fitting-mixed-models_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}