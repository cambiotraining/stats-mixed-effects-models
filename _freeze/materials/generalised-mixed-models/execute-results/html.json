{
  "hash": "74f9fe5db0f77cdd690682e2b4259a9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generalised mixed models\"\noutput: html_document\n---\n\n::: {.cell}\n\n:::\n\n\nThis page contains some information, along with a worked example, explaining how to fit and interpret generalised mixed effects models in `lme4`. \n\nThere are no exercises, but we will work through a dataset you'll recognise from earlier in the course as an example of the code.\n\n::: {.callout-tip}\n#### Prior knowledge\n\nThese bonus materials are intended to follow on from the materials and concepts introduced in our sister course on [generalised linear modelling](https://cambiotraining.github.io/stats-glm/), and will assume knowledge and familiarity with generalised linear models.\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\nWe'll need several packages, including the new `glmmTMB`, to explore fitting generalised linear mixed models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(performance)\nlibrary(glmmTMB)\n```\n:::\n\n:::\n\n## Generalising linear models\n\nOne of the assumptions of a linear model is that the response variable is continuous. But in many real experiments, the response variable might be one of the following:\n\n- binary (yes/no or success/fail)\n- proportional (number of successes out of all trials)\n- fractional (percentage of a quantity)\n- count (integers with a lower limit at 0)\n\nor might follow a strongly non-normal distribution, e.g., time or income often follow an exponential distribution.\n\nIn these cases, a linear model may not be appropriate, and/or a generalised linear model can provide a better fit. GLMs \"extend\" the standard linear model by wrapping the linear equation inside a non-linear link function. \n\n### Extending linear mixed effects models\n\nVery usefully, the procedure that we apply to generalise a standard linear model - namely, adding a link function - also works to generalise linear mixed effects models.\n\nBy including both a link function and one or more random effects, we can combine two extensions to the linear model to create generalised linear mixed effects models (GLMMs).\n\nThe assumptions of a GLMM are an amalgamation of the assumptions of a GLM and a linear mixed model:\n\n- Independent observations (after random effects)\n- Response variable follows distribution from exponential family (binomial, Poisson, beta, gamma, etc.)\n- Correct link function; there is a linear relationship between the linearised model\n- Normally distributed random effects\n\n## Revisiting Arabidopsis\n\nTo give an illustration of how we fit and assess generalised linear mixed effects models (GLMMs), we'll look at the internal dataset `Arabidopsis`, which we investigated earlier in the course in [Exercise -@sec-exr_arabidopsis].\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Arabidopsis\")\n```\n:::\n\n:::\n\nIn this dataset, there are eight variables:\n\n- `total.fruits`, an integer variable measuring the total fruits produced per plant\n- `amd`, a variable measuring whether the plant underwent simulated herbivory (clipped or unclipped)\n- `nutrient`, a variable measuring which type of fertiliser/treatment the plant received (1, minimal or 8, added)\n- `reg`, or region, a variable with three categories (NL Netherlands, SP Spain, SW Sweden)\n- `popu`, or population, a variable representing groups within the regions\n- `gen`, or genotype, a variable with 24 categories\n- `rack`, a \"nuisance\" or confounding factor, representing which of two greenhouse racks the plant was grown on\n- `status`, another nuisance factor, representing the plant's germination method (Normal, Petri.Plate or Transplant)\n\nWe're interested in finding out whether the fruit yield can be predicted based on the type of fertiliser and whether the plant underwent simulated herbivory, across different genotypes and populations.\n\nIn the previous section of the course on checking assumptions, we fitted a standard linear mixed model to these data. Here, we'll fit a slightly simplified version:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlme_arabidopsis <- lmer(total.fruits ~ nutrient + amd + (1|popu) + (1|gen), \n                        data = Arabidopsis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lme_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: total.fruits ~ nutrient + amd + (1 | popu) + (1 | gen)\n   Data: Arabidopsis\n\nREML criterion at convergence: 6245.2\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.7839 -0.6391 -0.2043  0.2621  5.3628 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. \n gen      (Intercept) 5.498e-13 7.415e-07\n popu     (Intercept) 1.517e+02 1.232e+01\n Residual             1.264e+03 3.555e+01\nNumber of obs: 625, groups:  gen, 24; popu, 9\n\nFixed effects:\n             Estimate Std. Error      df t value Pr(>|t|)    \n(Intercept)     8.697      4.981  14.233   1.746    0.102    \nnutrient        4.578      0.407 614.918  11.248   <2e-16 ***\namdunclipped    4.540      2.847 614.662   1.595    0.111    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) nutrnt\nnutrient    -0.374       \namdunclippd -0.299  0.016\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n:::\n\n:::\n\nBut we found that the diagnostic plots for this model did not look good, in particular the residual vs fitted, location-scale, normal Q-Q and posterior predictive check plots:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(lme_arabidopsis, \n            check = c(\"linearity\", \"homogeneity\", \"qq\", \"pp_check\"))\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\nYou may have spotted the reason for this when you completed the exercise in section 7 of this course: `total.fruits` is not a continuous response variable, but instead a count variable.\n\nWe want to improve the way that we're modelling this variable by including a link function.\n\n### The glmer function\n\nSince `total.fruits` is a count variable, so we should consider a model that uses a discrete distribution, instead of the normal distribution we've been assuming so far. We can start with the Poisson distribution, which is the simplest of the commonly-used count distributions.\n\nWe do this in `lme4` using the `glmer` function (the `g` in the function name is for \"generalised\"). It combines the syntax that you're already used to from `lmer`, with the syntax from the standard `glm` function in base R. In other words, we keep all the same syntax for random effects, and we include the `family` argument to determine which link function we're using.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nglmm_arabidopsis <- glmer(total.fruits ~ nutrient + amd + (1|popu) + (1|gen), \n                          data = Arabidopsis, family = \"poisson\")\n\nsummary(glmm_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: poisson  ( log )\nFormula: total.fruits ~ nutrient + amd + (1 | popu) + (1 | gen)\n   Data: Arabidopsis\n\n     AIC      BIC   logLik deviance df.resid \n 20985.0  21007.2 -10487.5  20975.0      620 \n\nScaled residuals: \n   Min     1Q Median     3Q    Max \n-8.571 -3.648 -2.069  1.774 42.407 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n gen    (Intercept) 0.06356  0.2521  \n popu   (Intercept) 0.25745  0.5074  \nNumber of obs: 625, groups:  gen, 24; popu, 9\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  2.321459   0.178152  13.031   <2e-16 ***\nnutrient     0.170799   0.002493  68.508   <2e-16 ***\namdunclipped 0.139879   0.014719   9.503   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) nutrnt\nnutrient    -0.090       \namdunclippd -0.045  0.006\n```\n\n\n:::\n:::\n\n:::\n\nSome brief points of comparison between this model summary, and the summary for `lme_arabidopsis` above. \n\nFirstly, you'll see the GLMM has been fitted using maximum likelihood estimation rather than ReML. Secondly, you'll also see that there are some p-values provided as standard in the GLMM output; these are called Wald tests, which test whether the coefficient value is significantly different from zero (this is subtly different from testing whether the individual predictor itself is significant).\n\nLet's have a look at the diagnostic plots, and see if we've made any improvements on our standard linear mixed model.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(glmm_arabidopsis, residual_type = \"normal\",\n            check = c(\"pp_check\", \"outliers\", \"reqq\"))\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n:::\n\nWe have one potentially influential point we might want to investigate, which has a Cook's distance > 0.8. (Note that you can also use the `check_outliers` function if you find the plot above a little difficult to interpret, or if you want to change the threshold.)\n\nOur random effects do appear to be nicely normally distributed.\n\nThe posterior predictive check, however, raises some concerns. The blue simulated values don't really appear to be following the pattern of the data (green), especially on the left hand side of the plot.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(glmm_arabidopsis, residual_type = \"normal\",\n            check = c(\"vif\", \"overdispersion\"))\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_overdispersion(glmm_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Overdispersion test\n\n       dispersion ratio =    37.821\n  Pearson's Chi-Squared = 23449.158\n                p-value =   < 0.001\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nOverdispersion detected.\n```\n\n\n:::\n:::\n\n:::\n\nWell, we're fine on collinearity, but overdispersion/zero-inflation seems a huge problem, especially when we use the `check_overdispersion` function to investigate in more detail. It seems that the Poisson distribution actually isn't representative of our response variable.\n\n### Negative binomial regression\n\nWe can, instead of Poisson regression, try fitting a negative binomial regression instead. As with standard GLMs, this requires a slightly different function - `glmer.nb` rather than `glmer`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nglmmnb_arabidopsis <- glmer.nb(total.fruits ~ nutrient + amd + (1|popu) + (1|gen), \n                               data = Arabidopsis)\n\nsummary(glmmnb_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: Negative Binomial(0.536)  ( log )\nFormula: total.fruits ~ nutrient + amd + (1 | popu) + (1 | gen)\n   Data: Arabidopsis\n\n     AIC      BIC   logLik deviance df.resid \n  5051.1   5077.8  -2519.6   5039.1      619 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-0.7286 -0.6592 -0.3517  0.2440 12.2435 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n gen    (Intercept) 0.0461   0.2147  \n popu   (Intercept) 0.2466   0.4966  \nNumber of obs: 625, groups:  gen, 24; popu, 9\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   2.21630    0.20929   10.59   <2e-16 ***\nnutrient      0.17569    0.01646   10.68   <2e-16 ***\namdunclipped  0.27879    0.11426    2.44   0.0147 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) nutrnt\nnutrient    -0.410       \namdunclippd -0.323  0.126\n```\n\n\n:::\n:::\n\n:::\n\nIf we check the diagnostic plots, we can see a bit of improvement - the posterior predictive check in particular looks much better.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(glmmnb_arabidopsis, residual_type = \"normal\",\n            check = c(\"pp_check\", \"outliers\", \"reqq\"))\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_model(glmmnb_arabidopsis, residual_type = \"normal\",\n            check = c(\"vif\", \"overdispersion\"))\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_overdispersion(glmmnb_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Overdispersion test\n\n dispersion ratio = 0.386\n          p-value =  0.04\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUnderdispersion detected.\n```\n\n\n:::\n:::\n\n:::\n\nIt could still be better; there's evidence now for underdispersion. \n\nThe lingering issues might be because of zero-inflation. If we look at the distribution of the data via a histogram, this certainly looks plausible.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = Arabidopsis, aes(x = total.fruits)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\nWhat are the next steps in improving this analysis?\n\nWell, we could fit a zero-inflated model to these data. Because zero-inflated models are a bit more complex - you're actually fitting two different models or distributions simultaneously to the same dataset - `lme4` unfortunately doesn't contain a function that allows us to do this.\n\nIf you need to go beyond the standard array of distributions that are offered in `glm` and `glmer`, such as fitting a zero-inflated model, you have to explore other R packages. To help guide you, there is a brief description in the next session of some possible options. \n\n## Alternative packages\n\nThough we have focused heavily on `lme4` in this course, and for this section on GLMMs, it's important to flag to you that this is not the *only* package for fitting generalised mixed effects models (or linear mixed effects models, as it happens).\n\n### The glmmTMB package\n\nThis package is designed explicitly for generalised mixed effects modelling in R (and somewhat as an extension to `lme4`, so the syntax isn't too unfamiliar). \n\nYou can find a manual for the `glmmTMB` package written by the author [here](https://cran.r-project.org/web/packages/glmmTMB/vignettes/glmmTMB.pdf) that contains more information and code examples.\n\nHow might we use the package to fit a zero-inflated Poisson model for the `Arabidopsis` dataset?\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nglmmzip_arabidopsis <- glmmTMB(total.fruits ~ nutrient + rack + status + amd + reg + \n                          (1|popu) + (1|gen), data = Arabidopsis,\n                          family = \"poisson\", ziformula = ~1)\n\nsummary(glmmzip_arabidopsis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          \ntotal.fruits ~ nutrient + rack + status + amd + reg + (1 | popu) +  \n    (1 | gen)\nZero inflation:                ~1\nData: Arabidopsis\n\n     AIC      BIC   logLik deviance df.resid \n 16065.3  16114.1  -8021.6  16043.3      614 \n\nRandom effects:\n\nConditional model:\n Groups Name        Variance Std.Dev.\n popu   (Intercept) 0.02115  0.1454  \n gen    (Intercept) 0.02795  0.1672  \nNumber of obs: 625, groups:  popu, 9; gen, 24\n\nConditional model:\n                   Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        3.412538   0.132959   25.67  < 2e-16 ***\nnutrient           0.156741   0.002507   62.52  < 2e-16 ***\nrack              -0.668821   0.016042  -41.69  < 2e-16 ***\nstatusPetri.Plate -0.161421   0.022427   -7.20 6.13e-13 ***\nstatusTransplant  -0.184060   0.020137   -9.14  < 2e-16 ***\namdunclipped       0.059388   0.014770    4.02 5.80e-05 ***\nregSP              0.448013   0.156767    2.86  0.00427 ** \nregSW             -0.073457   0.168100   -0.44  0.66212    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nZero-inflation model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -1.3808     0.1001   -13.8   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n:::\n\nThe new bit of syntax is the `ziformula` argument. If you set this equal to `~0`, you are asking R to estimate the model *excluding* zero-inflation (which is also the default). So, to model the zero-inflation, you must set this argument equal to `~1`.\n\nWe could look at all the diagnostic plots (and in a real analysis situation, you would), but let's focus on the posterior predictive check.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(glmmzip_arabidopsis, residual_type = \"normal\", check = \"pp_check\")\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n:::\n\nIt's doing a much, much better job now of estimating those zeroes (top left of the plot). However, it's suffering from similar problems to our original Poisson model in the range around 1-15.\n\nPerhaps a zero-inflated negative binomial model might do the trick for the `Arabidopsis` dataset? We can fit that in `glmmTMB` by updating the `family` argument.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nglmmzinb_arabidopsis <- glmmTMB(total.fruits ~ nutrient + rack + status + amd + reg + \n                          (1|popu) + (1|gen), data = Arabidopsis,\n                          family = \"nbinom2\", ziformula = ~1)\n\ncheck_model(glmmzinb_arabidopsis, residual_type = \"normal\", check = \"pp_check\")\n```\n\n::: {.cell-output-display}\n![](generalised-mixed-models_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n\nNot perfect - but perhaps better?\n\n### Even more packages\n\nEven `glmmTMB` is not the end of the road. There are others one could use, including packages such as `brms` and `GLMMadaptive`, or the `glmmPQL` function from `MASS`, and you may see these cropping up in online tutorials or even papers.\n\nFor a detailed list of packages, [this resource](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html#which-r-packages-functions-fit-glmms) from Bolker et al. is a great starting point.\n\nA note of caution: not all packages will implement exactly the same computational methods \"under the hood\" as `lme4`, because fitting and assessing mixed effects models, especially non-linear and generalised ones, is difficult to do and therefore is still an area of active research and discussion in statistics. \n\nSo, if you notice that you get different estimates and numbers when fitting models in different packages, don't panic. What matters more than anything is the conclusion you draw from your data overall, and how confident you are in that conclusion.\n\nFor those of you with an interest in the computational side of things, you might find resources such as [this blog post](https://rpubs.com/kaz_yos/glmm1) to be a useful starting place.\n\n## Summary\n\nLinear mixed effects models can be generalised in the same way that standard linear models are: by wrapping the linear equation inside a non-linear link function. The link function is chosen based on the distribution of the response variable.\n\nAlternatively, you might prefer to think of it the other way around: that GLMs can be extended to cope with non-independence by adding random effects to them. In either case, the result is the same. Both random effects and link functions can be used simultaneously, to cope with the (quite common!) situation where a dataset is both hierarchical and has a non-continuous response variable.\n\n::: {.callout-tip}\n#### Key points\n- By including both a link function to linearise the model, and random effects, we can fit generalised linear mixed effects models in R\n- We can do this by using the `glmer` or `glmer.nb` functions from `lme4` for most of the \"common\" GLMMs\n- Other packages such as `glmmTMB` are needed for zero-inflated models and other extensions\n- Evaluating and assessing GLMMs can be done using the same methods as for standard GLMs/linear mixed effects models\n:::\n\n",
    "supporting": [
      "generalised-mixed-models_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}